steps:
  # Call docker build to build the image, using the previous build for caching
  - name: 'gcr.io/cloud-builders/docker'
    args: [ 'pull', 'gcr.io/$PROJECT_ID/ptechnews-${_ENV}:latest' ]
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build',
      '--cache-from', 'gcr.io/$PROJECT_ID/ptechnews-${_ENV}:latest',
      '--file', './Dockerfile',
      '-t', 'gcr.io/$PROJECT_ID/ptechnews-${_ENV}:$COMMIT_SHA', '.']
  # Tag the image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'gcr.io/$PROJECT_ID/ptechnews-${_ENV}:$COMMIT_SHA', 'gcr.io/$PROJECT_ID/ptechnews-${_ENV}:latest']
  # Push the image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/ptechnews-${_ENV}:$COMMIT_SHA']
  # Remote tag the newly pushed image as latest
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['container', 'images', 'add-tag', 'gcr.io/$PROJECT_ID/ptechnews-${_ENV}:$COMMIT_SHA', 'gcr.io/$PROJECT_ID/ptechnews-${_ENV}:latest']
  # Update ptechconf deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
    - --namespace=$_NAMESPACE
    - set
    - image
    - deployment
    - ${_ENV}-ptech-newsletter
    - ptech-newsletter=gcr.io/$PROJECT_ID/ptechnews-${_ENV}:$COMMIT_SHA
    env:
    - 'CLOUDSDK_COMPUTE_ZONE=$_CLOUDSDK_COMPUTE_ZONE'
    - 'CLOUDSDK_CONTAINER_CLUSTER=$_CLOUDSDK_CONTAINER_CLUSTER'
